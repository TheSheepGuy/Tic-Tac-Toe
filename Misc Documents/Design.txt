==Main algorithm==
1. Generate a new board.
2. Make a boolean of "win", whether the game has been won yet (True = yes).
3. Make an int of "playerWin", what player won (if player 1 wins, playerWin = 1).
4. When win = False:
4.1. Loop player times (twice):
4.1.1. Draw the board.
4.1.2. Ask the player to make a move.
4.1.3. Check if someone has won.
5. Report which player has won.

==Class Board==
Properties:
- Width (x)
- Height (y)
- List of spaces

Methods:
- Generate board:
	1. Make a new list of Spaces.
	2. Loop width times:
	2.1. Loop height times:
	2.1.1. Add a space to the list at coordinate (width, height) with initial state 0.

- Draw board:
	1. Loop height times:
	1.1. Write "\n|"
	1.2. Loop width times:
	1.2.3. Write the space at coordinate (width, height)

	1.1.3.1. Write " Z |" replacing Z with whatever state the space is in ( , X, O) 

- Make move:
	1. Draw the board.
	2. Ask the player which co-ordinate they want to place their piece.

- Check win:
	1. Check all the spaces if all rows' state is 1 or 2. If yes, skip to 5.
	2. Check all the spaces if all columns' state is 1 or 2. If yes, skip to 5.
	3. Check all the spaces if all diagonals' state is 1 or 2. If yes, skip to 5.
	4. Check if all spaces are full. If yes, skip to 7.
	5. Save which state it was.
	6. Report win.
	7. Report draw.
	8. Otherwise, report false.

	3.1. Check all spaces where coordinates x = y. In other words, check (1,1), (2,2), and (3,3).
	3.2. Check all spaces starting with coordinates min(x) and max(y), then adding and subtracting one from each respectively. In other words, (1,3), (2,2), (3,1).

==Class Space==
Properties:
- X-coordinate
- Y-coordinate
- State (0, 1, 2 = Blank, X, O)